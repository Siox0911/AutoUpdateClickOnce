using AutoUpdateClickOnce.SettingsHelper;
using AutoUpdateClickOnce;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Web;
using System.Windows;
using System.Windows.Threading;
using AutoUpdateClickOnce.EventArgument;

namespace AutoUpdateClickOnceDemo
{
    /// <summary>
    /// Window to demonstrate the following:
    /// <list type="bullet">
    /// <item><term>Installation location of a ClickOnce application.</term>
    /// <description>
    /// Displaying and opening the installation location of a ClickOnce application. The installation location is demonstrated by
    /// <seealso cref="GetInstallPath"/>. This fills the property <seealso cref="InstallationPath"/>.
    /// Note that the property <seealso cref="InstallationPath"/> is generated by the code generator of <seealso cref="CommunityToolkit.Mvvm"/>.
    /// In this <seealso cref="MainWindow"/>, it is the private field <seealso cref="installationPath"/>.
    /// </description>
    /// </item>
    /// <item><term>Auto-update of a ClickOnce application from .NET 7 onwards.</term>
    /// <description>
    /// The principle is simple. We create a <see cref="DispatcherTimer"/> that regularly checks if an update is available.
    /// The class <seealso cref="ApplicationDeployment"/> is used for this. This class can only be used if the application is installed via ClickOnce.
    /// It uses information from the application environment.
    /// This class can be found in the project <see cref="AutoUpdateClickOnce"/>. This class is originally from Microsoft. I have only extended it a bit.
    /// For example, the method <seealso cref="ApplicationDeployment.CheckForUpdateAsync(System.Threading.CancellationToken)"/> was added.
    /// <see cref="ApplicationDeployment.CheckForUpdateAsync(System.Threading.CancellationToken)"/> sets the property <see cref="ApplicationDeployment.IsUpdateAvailable"/>
    /// to <see langword="true"/> if an update is available.
    /// The <seealso cref="ApplicationDeployment.Update"/> method installs the update without prompting and without saving anything.
    /// You have to handle the saving yourself. You also have to decide when to install the update. Note that after an update,
    /// the settings usually revert to default. So you need to save the settings before the update and restore them afterwards.
    /// </description>
    /// </item>
    /// </list>
    /// <para>
    /// Example of using <seealso cref="ApplicationDeployment"/>:
    /// <code>
    /// if(ApplicationDeployment.IsNetworkDeployed)
    /// {
    ///     var appDeployment = ApplicationDeployment.CurrentDeployment;
    ///     await appDeployment.CheckForUpdateAsync();
    ///     if(appDeployment.IsUpdateAvailable)
    ///     {
    ///         //Save and export settings
    ///         SaveSettings(); //SaveSettings is not a part of the ApplicationDeployment or ExportHelper class
    ///         var settingsExportHelper = new SettingsExportHelper(Properties.Settings.Default, Properties.Settings.Default.SettingsFile);
    ///         //true means that is human readable (well formated)
    ///         settingsExportHelper.Export(true);
    ///         
    ///         //Update the application
    ///         appDeployment.Update();
    ///     }
    /// }
    /// </code>
    /// </para>
    /// </summary>
    [ObservableObject]
    public partial class MainWindow : Window
    {

        /// <summary>
        /// Regularly checks if an update is available.
        /// </summary>
        private readonly DispatcherTimer checkUpdateTimer = new DispatcherTimer();

        /// <summary>
        /// This is a flag that is set to true if the settings are imported.
        /// </summary>
        private bool importSettingsDone;

        /// <summary>
        /// The installation path of the application if it was installed via ClickOnce.
        /// </summary>
        [ObservableProperty]
        private string? installationPath;

        /// <summary>
        /// Is an update available? Should be true when an update is rolled out.
        /// The ClickOnce application usually checks for updates itself at startup.
        /// This can be configured in the publish settings to check before or after startup.
        /// </summary>
        [ObservableProperty]
        private bool updateAvailable;

        /// <summary>
        /// Published on the network? Will be <see langword="true"/> if the installation location is a UNC path or web like http.
        /// </summary>
        [ObservableProperty]
        private bool isNetWorkDeployed;

        /// <summary>
        /// Is it the first start of the application? Is <see langword="true"/> if the application is started for the first time or after an update.
        /// </summary>
        [ObservableProperty]
        private bool isFirstRun;

        /// <summary>
        /// The current version of the application.
        /// </summary>
        [ObservableProperty]
        private string? currentVersion;

        /// <summary>
        /// The version to which it was updated.
        /// </summary>
        [ObservableProperty]
        private string? updatedVersion;

        /// <summary>
        /// This is the update URL specified in the application configuration. So the URL with the file alias application.application.
        /// </summary>
        [ObservableProperty]
        private string? updateLocation;

        /// <summary>
        /// Actually a date, but we make it a string. This is the date of the last check for an update.
        /// </summary>
        [ObservableProperty]
        private string? lastUpdate;

        /// <summary>
        /// The launcher version. This is the version of the ClickOnce launcher, not the application.
        /// </summary>
        [ObservableProperty]
        private string? lauchnerVersion;

        /// <summary>
        /// The data directory of the application. This is the path where the application stores its data.
        /// </summary>
        [ObservableProperty]
        private string? dataDirectory;

        /// <summary>
        /// The full name of the updated application. This is the name of the application that will be executed after the update.
        /// </summary>
        [ObservableProperty]
        private string? updatedApplicationFullName;

        /// <summary>
        /// So either this is the URL with the file alias application.application for WEB. Or something else.
        /// </summary>
        [ObservableProperty]
        private string? activationUri;

        /// <summary>
        /// The available update version. This is the version that can be updated to.
        /// </summary>
        [ObservableProperty]
        private string? availableUpdateVersion;

        /// <summary>
        /// Debug text. In the UI, this fills the textbox.
        /// </summary>
        [ObservableProperty]
        private string? debugText;

        [ObservableProperty]
        private string? newSetting;

        [ObservableProperty]
        private string? settingsKey;

        /// <inheritdoc/>
        public MainWindow()
        {
            InitializeComponent();

        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            //Get the installation path
            GetInstallPath();

            //1. Start and use a update timer
            //checkUpdateTimer.Interval = TimeSpan.FromSeconds(5);
            //checkUpdateTimer.Tick += CheckUpdateTimer_Tick;
            //checkUpdateTimer.Start();

            //2. Check with the event UpdateAvailable if an update is available
            //The 2. way is called only once. Or you must restart the update check.
            //To restart the update check, call the function appDeployment.RestartUpdateCheck();
            if (ApplicationDeployment.IsNetworkDeployed)
            {
                var appDeployment = ApplicationDeployment.CurrentDeployment;
                if (appDeployment != null)
                {
                    appDeployment.UpdateAvailable += AppDeployment_UpdateAvailable;

                    if (appDeployment.IsFirstRun)
                    {
                        if (File.Exists(Properties.Settings.Default.SettingsFile))
                        {
                            SettingsExportHelper settingsExportHelper = new SettingsExportHelper(
                                                                            Properties.Settings.Default,
                                                                            Properties.Settings.Default.SettingsFile
                                                                            );
                            settingsExportHelper.Import();
                            LoadSettings();
                            SaveSettings();
                        }
                    }
                }

            }
            LoadSettings();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            SaveSettings();
        }

        private void AppDeployment_UpdateAvailable(object? sender, UpdateEventArgs e)
        {
            FillProperties(e.ApplicationDeployment);
            var result = MessageBox.Show($"Update from version {e.CurrentVersion} to version {e.UpdateVersion} is available. Install update now?", $"Update to {e.UpdateVersion} is available", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {
                SaveSettings();
                SettingsExportHelper settingsExportHelper = new SettingsExportHelper(Properties.Settings.Default, Properties.Settings.Default.SettingsFile);
                settingsExportHelper.Export(true);
                e.ApplicationDeployment.Update();
            }
            else
            {
                ApplicationDeployment.CurrentDeployment?.RestartUpdateCheck();
            }
        }

        /// <summary>
        /// This is where the automatic update check and execution happens.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private async void CheckUpdateTimer_Tick(object? sender, EventArgs e)
        {
            try
            {
                //Do we have a network deployment?
                if (ApplicationDeployment.IsNetworkDeployed)
                {
                    //Then we end up here
                    IsNetWorkDeployed = true;
                    //Get the current instance of the deployment object
                    var appDeployment = ApplicationDeployment.CurrentDeployment;
                    //If we have a deployment object, we can check if an update is available
                    if (appDeployment != null)
                    {
                        //This is not necessary for the update function
                        FillProperties(appDeployment);

                        if (appDeployment.IsFirstRun && !importSettingsDone)
                        {
                            //Check if the exported settings file exists
                            if (File.Exists(Properties.Settings.Default.SettingsFile))
                            {
                                //Import the settings
                                SettingsExportHelper settingsExportHelper = new SettingsExportHelper(
                                                                                Properties.Settings.Default,
                                                                                Properties.Settings.Default.SettingsFile
                                                                                );
                                settingsExportHelper.Import();
                                //LoadSettings is important to load the settings
                                //so e.g. the UI is updated
                                LoadSettings();
                                //SaveSettings is important to save the settings
                                //Because the old saved settings are still present
                                SaveSettings();
                                importSettingsDone = true;
                            }
                        }

                        //try
                        //{
                        //Check if an update is available
                        await appDeployment.CheckForUpdateAsync();
                        //}
                        //catch (Exception ex)
                        //{
                        //    DebugText += ex.ToString();
                        //}

                        //If an update is available
                        if (appDeployment.IsUpdateAvailable)
                        {
                            //Stop the timer
                            checkUpdateTimer.Stop();
                            DebugText += "Update available\r\n";

                            //If you omit the MessageBox, the update will be installed automatically. Without prompt.
                            var result = MessageBox.Show($"Update to version {appDeployment.AvailableUpdateVersion} is available. Install update now?", "Update available", MessageBoxButton.YesNo, MessageBoxImage.Question);
                            if (result == MessageBoxResult.Yes)
                            {
                                SaveSettings();
                                SettingsExportHelper settingsExportHelper = new SettingsExportHelper(Properties.Settings.Default, Properties.Settings.Default.SettingsFile);
                                settingsExportHelper.Export(true);
                                appDeployment?.Update();
                            }
                            else
                            {
                                checkUpdateTimer.Start();
                            }
                        }
                        else
                        {
                            DebugText += "No update available\r\n";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString() + "\r\nStackTrace:\r\n" + ex.StackTrace);
            }
        }

        /// <summary>
        /// Helper method to fill the properties of the MainWindow and to keep <seealso cref="CheckUpdateTimer_Tick(object?, EventArgs)"/>
        /// a bit clearer.
        /// </summary>
        /// <param name="appDeployment"></param>
        private void FillProperties(ApplicationDeployment appDeployment)
        {
            //This is from the Microsoft example
            var nameValueTable = new NameValueCollection();

            //Read the properties of the deployment object
            CurrentVersion = appDeployment?.CurrentVersion?.ToString() ?? "Not available (null)";
            UpdatedVersion = appDeployment?.UpdatedVersion?.ToString() ?? "Not available (null)";
            UpdateLocation = appDeployment?.UpdateLocation?.ToString() ?? "Not available (null)";
            LauchnerVersion = appDeployment?.LauncherVersion?.ToString() ?? "Not available (null)";
            DataDirectory = appDeployment?.DataDirectory ?? "Not available (null)";
            LastUpdate = appDeployment?.TimeOfLastUpdateCheck.ToString("dd.MM.yyyy HH:mm:ss", new CultureInfo("de-DE")) ?? "Not available (null)";
            UpdatedApplicationFullName = appDeployment?.UpdatedApplicationFullName ?? "Not available (null)";
            ActivationUri = appDeployment?.ActivationUri?.ToString() ?? "Not available (null)";
            IsFirstRun = appDeployment?.IsFirstRun == true;
            UpdateAvailable = appDeployment?.IsUpdateAvailable == true;
            AvailableUpdateVersion = appDeployment?.AvailableUpdateVersion?.ToString() ?? "Not available (null)";

            //Only if it has an ActivationUri, we can read the query parameters
            //Not possible via UNC
            if (appDeployment?.ActivationUri != null)
            {
                nameValueTable = HttpUtility.ParseQueryString(appDeployment.ActivationUri.Query);
                var keys = nameValueTable.AllKeys;
                if (keys != null)
                {
                    foreach (var key in keys)
                    {
                        DebugText += $"Key: {key}\r\n";
                        DebugText += $"Value: {nameValueTable[key]}\r\n";
                    }
                }
                UpdateAvailable = true;
            }
            else
            {
                DebugText += "No ActivationUri available\r\n Probably UNC path or local inst. path\r\n";
            }
        }

        /// <summary>
        /// Gets the installation path and sets the property <seealso cref="InstallationPath"/>.
        /// </summary>
        private void GetInstallPath()
        {
            //Note that the property was generated by the code generator of CommunityToolkit.Mvvm.
            InstallationPath = Assembly.GetExecutingAssembly().Location;

            if (!string.IsNullOrEmpty(InstallationPath))
            {
                //Unfortunately, we have to check if it is a file or a directory
                //For this, we check the attributes
                var attributes = File.GetAttributes(InstallationPath);
                if ((attributes & FileAttributes.Directory) == FileAttributes.Directory)
                {
                    //Is directory, all good
                }
                else
                {
                    //Otherwise, we get the file info and then take the directory
                    var fileInfo = new FileInfo(InstallationPath);
                    InstallationPath = fileInfo.DirectoryName;
                }
            }
        }

        /// <summary>
        /// Opens the <see cref="InstallationPath"/> if it is set.
        /// </summary>
        [RelayCommand]
        private void OpenInstallPathInExplorer()
        {
            if (!string.IsNullOrEmpty(InstallationPath))
            {
                var process = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = "explorer.exe",
                        Arguments = InstallationPath
                    }
                };
                process.Start();
            }
        }

        /// <summary>
        /// Strategy to load the settings with a SettingsKey. Save the settingskeys as application settings.
        /// First, load the SettingsKeys. Set the settings key and then reload the settings.
        /// </summary>
        private void LoadSettings()
        {
            Properties.Settings.Default.SettingsKey = Properties.Settings.Default.SettingsKey1App;
            Properties.Settings.Default.Reload();
            SettingsKey = Properties.Settings.Default.SettingsKey;
            NewSetting = Properties.Settings.Default.TestEinstellung;
        }

        private void SaveSettings()
        {
            Properties.Settings.Default.TestEinstellung = NewSetting;
            Properties.Settings.Default.Save();
        }
    }
}
